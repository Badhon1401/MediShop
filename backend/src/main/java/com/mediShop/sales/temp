// ====================================================================================
// DOMAIN LAYER - ENTITIES
// ====================================================================================





// ====================================================================================
// DOMAIN LAYER - REPOSITORY INTERFACES
// ====================================================================================





// ====================================================================================
// DOMAIN LAYER - VALUE OBJECTS
// ====================================================================================





// ====================================================================================
// APPLICATION LAYER - DTOs
// ====================================================================================







// ====================================================================================
// APPLICATION LAYER - EXCEPTIONS
// ====================================================================================







// ====================================================================================
// APPLICATION LAYER - USE CASES
// ====================================================================================








// ====================================================================================
// INFRASTRUCTURE LAYER - WEB CONTROLLERS
// ====================================================================================





// ====================================================================================
// INFRASTRUCTURE LAYER - EXCEPTION HANDLING
// ====================================================================================



// ====================================================================================
// INFRASTRUCTURE LAYER - PERSISTENCE
// ====================================================================================




// ====================================================================================
// CONFIGURATION FILES
// ====================================================================================

// File: src/main/resources/application-sales.properties
# Sales Module Specific Configuration
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/medishop}
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.com.mediShop.sales=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Server Configuration
server.port=${SERVER_PORT:8080}

# ====================================================================================
// SQL SCRIPTS FOR DATABASE INITIALIZATION
// ====================================================================================

-- File: src/main/resources/db/migration/V1__Create_Sales_Tables.sql
-- Sales Table
CREATE TABLE IF NOT EXISTS sales (
    items_id SERIAL PRIMARY KEY,
    sales_id INTEGER NOT NULL,
    customer_phone_number VARCHAR(20) NOT NULL,
    sales_date DATE NOT NULL DEFAULT CURRENT_DATE,
    medicine_name VARCHAR(255) NOT NULL,
    medicine_unit_price DECIMAL(10,2) NOT NULL,
    per_medicine_total_quantity INTEGER NOT NULL,
    per_medicine_total_amount DECIMAL(10,2) NOT NULL,
    total_price_per_customer_transaction DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Customer Table
CREATE TABLE IF NOT EXISTS customer (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    contact_number VARCHAR(20) UNIQUE NOT NULL,
    registration_date DATE NOT NULL DEFAULT CURRENT_DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_sales_sales_id ON sales(sales_id);
CREATE INDEX IF NOT EXISTS idx_sales_customer_phone ON sales(customer_phone_number);
CREATE INDEX IF NOT EXISTS idx_sales_date ON sales(sales_date);
CREATE INDEX IF NOT EXISTS idx_sales_medicine_name ON sales(medicine_name);
CREATE INDEX IF NOT EXISTS idx_customer_contact_number ON customer(contact_number);

-- File: src/main/resources/db/migration/V2__Insert_Sample_Data.sql
-- Sample Customer Data
INSERT INTO customer (name, contact_number, registration_date) VALUES
('John Doe', '01712345678', '2025-01-01'),
('Jane Smith', '01812345679', '2025-01-02'),
('Mike Johnson', '01912345680', '2025-01-03'),
('Sarah Wilson', '01612345681', '2025-01-04'),
('David Brown', '01512345682', '2025-01-05');

-- Sample Sales Data
INSERT INTO sales (sales_id, customer_phone_number, sales_date, medicine_name, medicine_unit_price, per_medicine_total_quantity, per_medicine_total_amount, total_price_per_customer_transaction) VALUES
(1001, '01712345678', '2025-07-09', 'Paracetamol', 5.00, 2, 10.00, 25.00),
(1001, '01712345678', '2025-07-09', 'Omeprazole', 15.00, 1, 15.00, 25.00),
(1002, '01812345679', '2025-07-10', 'Paracetamol', 5.00, 3, 15.00, 15.00),
(1003, '01912345680', '2025-07-11', 'Vitamin C', 20.00, 1, 20.00, 45.00),
(1003, '01912345680', '2025-07-11', 'Zinc Tablet', 25.00, 1, 25.00, 45.00),
(1004, '01612345681', '2025-07-12', 'Cough Syrup', 30.00, 2, 60.00, 60.00),
(1005, '01512345682', '2025-07-13', 'Paracetamol', 5.00, 4, 20.00, 20.00);

// ====================================================================================
// TESTING CLASSES
// ====================================================================================

// File: src/test/java/com/mediShop/sales/application/usecase/CreateSalesUseCaseTest.java
package com.mediShop.sales.application.usecase;

import com.mediShop.sales.application.dto.SalesRequestDTO;
import com.mediShop.sales.application.dto.SalesResponseDTO;
import com.mediShop.sales.domain.entity.Customer;
import com.mediShop.sales.domain.entity.Sales;
import com.mediShop.sales.domain.repository.CustomerRepository;
import com.mediShop.sales.domain.repository.SalesRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CreateSalesUseCaseTest {
    
    @Mock
    private SalesRepository salesRepository;
    
    @Mock
    private CustomerRepository customerRepository;
    
    @InjectMocks
    private CreateSalesUseCase createSalesUseCase;
    
    private SalesRequestDTO salesRequest;
    private Customer existingCustomer;
    private Sales savedSales;
    
    @BeforeEach
    void setUp() {
        // Setup test data
        SalesRequestDTO.SalesItemDTO item = new SalesRequestDTO.SalesItemDTO();
        item.setMedicineName("Paracetamol");
        item.setQuantity(2);
        item.setUnitPrice(5.0);
        
        salesRequest = new SalesRequestDTO();
        salesRequest.setCustomerName("John Doe");
        salesRequest.setCustomerPhoneNumber("01712345678");
        salesRequest.setItems(List.of(item));
        
        existingCustomer = new Customer();
        existingCustomer.setCustomerId(1);
        existingCustomer.setName("John Doe");
        existingCustomer.setContactNumber("01712345678");
        existingCustomer.setRegistrationDate(LocalDate.now());
        
        savedSales = new Sales();
        savedSales.setItemsId(1);
        savedSales.setSalesId(1001);
        savedSales.setCustomerPhoneNumber("01712345678");
        savedSales.setSalesDate(LocalDate.now());
        savedSales.setMedicineName("Paracetamol");
        savedSales.setMedicineUnitPrice(5.0);
        savedSales.setPerMedicineTotalQuantity(2);
        savedSales.setPerMedicineTotalAmount(10.0);
        savedSales.setTotalPricePerCustomerTransaction(10.0);
    }
    
    @Test
    void execute_WithExistingCustomer_ShouldCreateSalesSuccessfully() {
        // Given
        when(salesRepository.findMaxSalesId()).thenReturn(Optional.of(1000));
        when(customerRepository.findByContactNumber(anyString())).thenReturn(Optional.of(existingCustomer));
        when(salesRepository.save(any(Sales.class))).thenReturn(savedSales);
        
        // When
        SalesResponseDTO result = createSalesUseCase.execute(salesRequest);
        
        // Then
        assertNotNull(result);
        assertEquals(1001, result.getSalesId());
        assertEquals("John Doe", result.getCustomerName());
        assertEquals("01712345678", result.getCustomerPhoneNumber());
        assertEquals(10.0, result.getTotalAmount());
        assertEquals(1, result.getItems().size());
        
        verify(customerRepository, times(1)).findByContactNumber("01712345678");
        verify(customerRepository, never()).save(any(Customer.class));
        verify(salesRepository, times(1)).save(any(Sales.class));
    }
    
    @Test
    void execute_WithNewCustomer_ShouldCreateCustomerAndSales() {
        // Given
        when(salesRepository.findMaxSalesId()).thenReturn(Optional.of(1000));
        when(customerRepository.findByContactNumber(anyString())).thenReturn(Optional.empty());
        when(customerRepository.save(any(Customer.class))).thenReturn(existingCustomer);
        when(salesRepository.save(any(Sales.class))).thenReturn(savedSales);
        
        // When
        SalesResponseDTO result = createSalesUseCase.execute(salesRequest);
        
        // Then
        assertNotNull(result);
        assertEquals(1001, result.getSalesId());
        assertEquals("John Doe", result.getCustomerName());
        
        verify(customerRepository, times(1)).findByContactNumber("01712345678");
        verify(customerRepository, times(1)).save(any(Customer.class));
        verify(salesRepository, times(1)).save(any(Sales.class));
    }
}

// File: src/test/java/com/mediShop/sales/infrastructure/web/SalesControllerTest.java
package com.mediShop.sales.infrastructure.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mediShop.sales.application.dto.SalesRequestDTO;
import com.mediShop.sales.application.dto.SalesResponseDTO;
import com.mediShop.sales.application.usecase.CreateSalesUseCase;
import com.mediShop.sales.application.usecase.GetSalesUseCase;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import java.time.LocalDate;
import java.util.List;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(SalesController.class)
class SalesControllerTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private CreateSalesUseCase createSalesUseCase;
    
    @MockBean
    private GetSalesUseCase getSalesUseCase;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    private SalesRequestDTO salesRequest;
    private SalesResponseDTO salesResponse;
    
    @BeforeEach
    void setUp() {
        SalesRequestDTO.SalesItemDTO item = new SalesRequestDTO.SalesItemDTO();
        item.setMedicineName("Paracetamol");
        item.setQuantity(2);
        item.setUnitPrice(5.0);
        
        salesRequest = new SalesRequestDTO();
        salesRequest.setCustomerName("John Doe");
        salesRequest.setCustomerPhoneNumber("01712345678");
        salesRequest.setItems(List.of(item));
        
        SalesResponseDTO.SalesItemResponseDTO responseItem = new SalesResponseDTO.SalesItemResponseDTO();
        responseItem.setItemsId(1);
        responseItem.setMedicineName("Paracetamol");
        responseItem.setUnitPrice(5.0);
        responseItem.setQuantity(2);
        responseItem.setTotalAmount(10.0);
        
        salesResponse = new SalesResponseDTO();
        salesResponse.setSalesId(1001);
        salesResponse.setCustomerName("John Doe");
        salesResponse.setCustomerPhoneNumber("01712345678");
        salesResponse.setSalesDate(LocalDate.now());
        salesResponse.setItems(List.of(responseItem));
        salesResponse.setTotalAmount(10.0);
    }
    
    @Test
    void createSale_WithValidRequest_ShouldReturn201() throws Exception {
        // Given
        when(createSalesUseCase.execute(any(SalesRequestDTO.class))).thenReturn(salesResponse);
        
        // When & Then
        mockMvc.perform(post("/api/sales")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(salesRequest)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.salesId").value(1001))
                .andExpect(jsonPath("$.customerName").value("John Doe"))
                .andExpect(jsonPath("$.totalAmount").value(10.0));
    }
    
    @Test
    void createSale_WithInvalidRequest_ShouldReturn400() throws Exception {
        // Given
        salesRequest.setCustomerName(""); // Invalid empty name
        
        // When & Then
        mockMvc.perform(post("/api/sales")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(salesRequest)))
                .andExpect(status().isBadRequest());
    }
    
    @Test
    void getAllSales_ShouldReturn200() throws Exception {
        // Given
        when(getSalesUseCase.getAllSales()).thenReturn(List.of(salesResponse));
        
        // When & Then
        mockMvc.perform(get("/api/sales"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].salesId").value(1001))
                .andExpect(jsonPath("$[0].customerName").value("John Doe"));
    }
}

// ====================================================================================
// ADDITIONAL UTILITY CLASSES
// ====================================================================================

// File: src/main/java/com/mediShop/sales/application/dto/SalesStatisticsDTO.java
package com.mediShop.sales.application.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDate;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SalesStatisticsDTO {
    
    private LocalDate date;
    private Double totalSalesAmount;
    private Integer totalTransactions;
    private Integer totalItemsSold;
    private Double averageTransactionValue;
    private String topSellingMedicine;
    private Integer topSellingMedicineQuantity;
}

// File: src/main/java/com/mediShop/sales/application/usecase/GetSalesStatisticsUseCase.java
package com.mediShop.sales.application.usecase;

import com.mediShop.sales.application.dto.SalesStatisticsDTO;
import com.mediShop.sales.domain.repository.SalesRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class GetSalesStatisticsUseCase {
    
    private final SalesRepository salesRepository;
    
    public SalesStatisticsDTO getDailyStatistics(LocalDate date) {
        Double totalSalesAmount = salesRepository.getTotalSalesAmountByDate(date).orElse(0.0);
        
        List<Object[]> topSellingMedicines = salesRepository.getTopSellingMedicines(date, date);
        
        String topSellingMedicine = "";
        Integer topSellingQuantity = 0;
        
        if (!topSellingMedicines.isEmpty()) {
            Object[] topMedicine = topSellingMedicines.get(0);
            topSellingMedicine = (String) topMedicine[0];
            topSellingQuantity = ((Long) topMedicine[1]).intValue();
        }
        
        return new SalesStatisticsDTO(
            date,
            totalSalesAmount,
            0, // Would need additional query for transaction count
            topSellingQuantity,
            0.0, // Would need additional calculation
            topSellingMedicine,
            topSellingQuantity
        );
    }
}